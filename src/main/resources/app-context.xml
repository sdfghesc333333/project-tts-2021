<?xml version='1.0' encoding='UTF-8' ?>
<!-- was: <?xml version="1.0" encoding="UTF-8"?> -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd   
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--  Redis Configuration -->
    <bean id="stringRedisSerializer"
          class="org.springframework.data.redis.serializer.StringRedisSerializer"/>

    <bean id="jdkSerializationRedisSerializer"
          class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>

    <bean id="jedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="127.0.0.1"
          p:port="6379" p:usePool="true" p:database="2"/>

    <bean id="redisTemplate"
          class="org.springframework.data.redis.core.RedisTemplate"
          p:connection-factory-ref="jedisConnectionFactory"
          p:keySerializer-ref="stringRedisSerializer"
          p:valueSerializer-ref="jdkSerializationRedisSerializer"/>

    <bean id="redisService" class="com.app.tts.services.RedisService">
        <property name="redisTemplate" ref="redisTemplate"/>
        <property name="redisDefaultExprireTime" value="${redis.expire.time}"/>
    </bean>
    <!-- End Redis Configuration -->

    <bean
            class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:app.properties</value>
        </property>
        <property name="systemPropertiesModeName"
                  value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    </bean>

    <bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
        <property name="dataSourceClassName"
                  value="oracle.jdbc.pool.OracleDataSource"/>
        <property name="dataSourceProperties">
            <props>
                <prop key="url">${database.url}</prop>
                <prop key="user">${database.username}</prop>
                <prop key="password">${database.password}</prop>
            </props>
        </property>
        <!-- <property name="initializationFailFast" value="false" /> -->
        <property name="poolName" value="TTS_DB_POOL"/>
        <property name="minimumIdle"
                  value="${database.min.pool.size}"/>
        <property name="maximumPoolSize"
                  value="${database.max.pool.size}"/>
        <property name="idleTimeout" value="${database.idle.timeout}"/>
        <property name="validationTimeout"
                  value="${database.validation.timeout}"/>
        <property name="connectionTimeout"
                  value="${database.connection.timeout}"/>
        <property name="connectionTestQuery"
                  value="${database.connection.testquery}"/>
        <!-- <property name="leakDetectionThreshold" value="${database.leak.detection.threshold}"
            /> -->
    </bean>
    <bean id="ttsDataSource"
          class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg ref="hikariConfig"/>
    </bean>

    <!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->
    <!-- Data access object: Hibernate implementation. -->


    <!-- config server -->

    <bean id="ttsVertical"
          class="com.app.tts.server.vertical.TTSVertical">
        <property name="serverHost" value="${server.host}"/>
        <property name="serverPort" value="${server.port}"/>
        <property name="apiPrefix" value="${server.api.uri.prefix}"/>
        <property name="connectionKeepAlive"
                  value="${server.connection.keepalive}"/>
        <property name="connectionTimeOut"
                  value="${server.connection.timeout}"/>
        <property name="connectionIdleTimeOut"
                  value="${server.connection.idle.timeout}"/>
    </bean>

    <bean id="ttsServer" class="com.app.tts.server.TTSServer"
          init-method="init">
        <property name="workerPoolSize"
                  value="${server.worker.poolsize}"/>
        <property name="workerMaxExecuteTime"
                  value="${server.worker.max.execute.time}"/>
        <property name="eventLoopPoolSize"
                  value="${server.eventloop.poolsize}"/>
        <property name="eventLoopMaxExecuteTime"
                  value="${server.eventloop.max.execute.time}"/>
        <property name="threadCheckInterval"
                  value="${server.thread.checkinterval}"/>
        <property name="vertxVertical" ref="ttsVertical"/>
    </bean>

    <!-- config service -->

    <bean id="masterService" class="com.app.tts.services.MasterService">
        <property name="dataSource" ref="ttsDataSource" />
    </bean>

    <bean id="baseService" class="com.app.tts.services.BaseService">
        <property name="dataSource" ref="ttsDataSource"/>
    </bean>
    
    <bean id="userService" class="com.app.tts.services.UserService">
        <property name="dataSource" ref="ttsDataSource"/>
    </bean>

</beans>